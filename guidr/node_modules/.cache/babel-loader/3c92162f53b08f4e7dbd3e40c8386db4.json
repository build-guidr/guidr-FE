{"ast":null,"code":"import _objectWithoutProperties from \"/Users/trishnaamin/Lambda School/week-10/guidr-FE/guidr/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/trishnaamin/Lambda School/week-10/guidr-FE/guidr/src/components/PrivateRoute/PrivateRoute.js\";\nimport React, { Component } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\"; //Requirements:\n// 1. This component has to have the same API as the react router route component (< Route />)\n// 2. This component has to render a route component from react router and pass all of the props through to it.\n// 3. It has to check for a token (JWT) if the user is authenticated, then render the component. Otherwise, the user will be redirected to the login page (/login)\n\nvar PrivateRoute = function PrivateRoute(_ref) {\n  var Component = _ref.component,\n      rest = _objectWithoutProperties(_ref, [\"component\"]);\n\n  return React.createElement(Route, Object.assign({}, rest, {\n    render: function render(props) {\n      if (localStorage.getItem(\"token\")) {\n        return React.createElement(Component, Object.assign({}, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 14\n          },\n          __self: this\n        }));\n      } else {\n        // redirect to login\n        return React.createElement(Redirect, {\n          to: \"/\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 17\n          },\n          __self: this\n        });\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }));\n};\n\nexport default PrivateRoute;","map":{"version":3,"sources":["/Users/trishnaamin/Lambda School/week-10/guidr-FE/guidr/src/components/PrivateRoute/PrivateRoute.js"],"names":["React","Component","Route","Redirect","PrivateRoute","component","rest","props","localStorage","getItem"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC,C,CAEA;AACA;AACA;AACA;;AACA,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAAuC;AAAA,MAAzBH,SAAyB,QAApCI,SAAoC;AAAA,MAAXC,IAAW;;AAC1D,SACE,oBAAC,KAAD,oBACMA,IADN;AAEE,IAAA,MAAM,EAAE,gBAAAC,KAAK,EAAI;AACf,UAAIC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAJ,EAAmC;AACjC,eAAO,oBAAC,SAAD,oBAAeF,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACD,OAFD,MAEO;AACL;AACA,eAAO,oBAAC,QAAD;AAAU,UAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;AACF,KATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAaD,CAdD;;AAgBA,eAAeH,YAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\n//Requirements:\n// 1. This component has to have the same API as the react router route component (< Route />)\n// 2. This component has to render a route component from react router and pass all of the props through to it.\n// 3. It has to check for a token (JWT) if the user is authenticated, then render the component. Otherwise, the user will be redirected to the login page (/login)\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  return (\n    <Route\n      {...rest}\n      render={props => {\n        if (localStorage.getItem(\"token\")) {\n          return <Component {...props} />;\n        } else {\n          // redirect to login\n          return <Redirect to=\"/\" />;\n        }\n      }}\n    />\n  );\n};\n\nexport default PrivateRoute;\n"]},"metadata":{},"sourceType":"module"}